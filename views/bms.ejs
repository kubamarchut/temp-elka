<style media="screen">
  body{
    background: #000;
    font-family: monospace;
    padding: 10px 40px;
  }
  body *{
    font-family: monospace;
    color: #fff;
  }
  h1{
    font-size: 3rem;
    margin-bottom: 0;
  }
  .subtitle{
    font-size: 1.2rem;
  }
  .hall h2{
    font-size: 1.5rem;
    margin-bottom: 5px;
  }
  .hall span{
    font-size: 1.05rem;
  }
  .hall .subsubtitle{
    font-size: 1.1rem;
    margin-bottom: 3px;
    display: block;
  }
  span.active{
    color: #1e1;
  }
  span.inactive{
    color: #311;
  }
</style>
<h1>BMS</h1>
<span class="subtitle">System zarządzania budynkiem</span>
<div class="hall">
  <h2>Sala 161:</h2>
  <span class="subsubtitle">System ogrzewania</span>
  <span>Aktywność: </span> <span class="active">włączony</span> <br>
  <span>Aktualna temperatura: </span> <span class="active">17.0</span> <br>
  <span>Żądana temperatura: </span> <span class="active" id="temp"></span> <br>
  <span>Automatyczne sterowanie termostatem: </span><input type="checkbox" class="onoff" name="" value=""><span class="active">włączone</span>
</div>
<script src="/assets/js/basic.js">

</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script type="text/javascript">
  var temps = [];

  var tempbox = document.querySelector('span#temp');
  const average = arr => arr.reduce((a,b) => a + b, 0) / arr.length;
  $(function () {
      "use strict";

      // for better performance - to avoid searching in DOM
      var content = $('#content');
      var input = $('#input');
      var status = $('#status');

      // my color assigned by the server
      var myColor = false;
      // my name sent to the server
      var myName = false;

      // if user is running mozilla then use it's built-in WebSocket
      window.WebSocket = window.WebSocket || window.MozWebSocket;

      // if browser doesn't support WebSocket, just show some notification and exit
      if (!window.WebSocket) {
          content.html($('<p>', { text: 'Twoja przeglądarka nie wspiera WebSocket :(.'} ));
          input.hide();
          $('span').hide();
          return;
      }

      // open connection
      var connection = new WebSocket('wss://' + location.host);

      connection.onopen = function () {
          // first we want users to enter their names
          var cookie = getCookie('acount')
          if(cookie !== 'error'){
            connection.send(cookie);
            myName = JSON.parse(cookie).name;
          }
          else{
            var data = JSON.stringify({'room': 1111, 'name': "test", 'color': "test"})
            connection.send(data);
            setCookie('acount', data, 1)
          }
      };

      connection.onerror = function (error) {
          // just in there were some problems with conenction...
          content.html($('<p>', { text: 'Coś nie tak z twoim połączeniem lub serwerem.' } ));
      };

      // most important part - incoming messages
      connection.onmessage = function (message) {
          // try to parse JSON message. Because we know that the server always returns
          // JSON this should work without any problem but we should make sure that
          // the massage is not chunked or otherwise damaged.
          try {
              var json = JSON.parse(message.data);
          } catch (e) {
              console.log('This doesn\'t look like a valid JSON: ', message.data);
              return;
          }
          console.log("response", json);
          // NOTE: if you're not sure about the JSON structure
          // check the server source code above
          if (json.type === 'color') { // first response from the server with user's color
              myColor = json.data;
              status.text("Połączono z serwerem jako: "+myName).css('color', myColor);
              input.attr("placeholder", "Tu wpisz wiadomość");
              input.removeAttr('disabled').focus();
              // from now user can start sending messages
          } else if (json.type === 'history') { // entire message history
              // insert every single message to the chat window
              for (var i=0; i < json.data.length; i++) {
                temps.push(Number(json.data[i].text));
              }

              tempbox.innerHTML = average(temps) + " średnia z " + temps.length + " głosów";
          } else if (json.type === 'message') { // it's a single message
              input.removeAttr('disabled'); // let the user write another message
              temps.push(Number(json.data.text))
              tempbox.innerHTML = average(temps) + " średnia z " + temps.length + " głosów";
          } else {
              console.log('Hmm..., I\'ve never seen JSON like this: ', json);
          }
      };

      /**
       * Send mesage when user presses Enter key
       */

      input.keydown(function(e) {
          if (e.keyCode === 13) {
              var msg = $(this).val();
              if (!msg) {
                  return;
              }
              // send the message as an ordinary text
              connection.send(msg);
              $(this).val('');
              // disable the input field to make the user wait until server
              // sends back response
              input.attr('disabled', 'disabled');

              // we know that the first message sent from a user their name
              if (myName === false) {
                  myName = msg;
              }
          }
      });

      /**
       * This method is optional. If the server wasn't able to respond to the
       * in 3 seconds then show some error message to notify the user that
       * something is wrong.
       */
      setInterval(function() {
          if (connection.readyState !== 1) {
              status.text('Wystąpił błąd');
              input.attr('disabled', 'disabled').val('Brak możliwości połącznia z serwerem.');
          }
      }, 3000);

    function updateScroll(){
      var element = document.getElementById("content");
      element.scrollTop = element.scrollHeight;
    }

      /**
       * Add message to the chat window
       */
      function addMessage(author, message, color, dt) {
          content.append('<p><span style="background:' + color + '"; '+(myName == author ? 'class="msg my"': "class=msg") +'>' + author + ': ' + message + '<span class="onhover">'+ (dt.getHours() < 10 ? '0' + dt.getHours() : dt.getHours()) + ':'
               + (dt.getMinutes() < 10 ? '0' + dt.getMinutes() : dt.getMinutes())+'</span></span></p>');
          input.focus();
          updateScroll();
      }

  });

</script>
